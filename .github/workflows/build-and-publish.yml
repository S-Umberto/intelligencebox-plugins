name: Build and Publish Docker Images

on:
  workflow_dispatch:
    inputs:
      server_name:
        description: 'MCP server name (e.g., mcp-iop-ticketing-server)'
        required: true
        type: string
        default: 'mcp-iop-ticketing-server'

env:
  REGISTRY: ghcr.io

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Configure Docker daemon
        run: |
          sudo mkdir -p /etc/docker
          sudo cp .github/docker-daemon.json /etc/docker/daemon.json
          sudo systemctl restart docker || true
          sleep 5
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.5
            network=host
          buildkitd-flags: --debug
          buildkitd-config-inline: |
            [worker.oci]
              max-parallelism = 2
            [registry."docker.io"]
              mirrors = ["mirror.gcr.io"]
            [[registry."docker.io".endpoint]]
              url = "https://registry-1.docker.io"
            [[registry."docker.io".endpoint]]
              url = "https://registry.docker.io"
            [[registry."docker.io".endpoint]]
              url = "https://mirror.gcr.io"
      
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set build variables
        id: vars
        run: |
          SERVER_NAME="${{ github.event.inputs.server_name }}"
          echo "server_name=${SERVER_NAME}" >> $GITHUB_OUTPUT
          echo "context=./servers/${SERVER_NAME}" >> $GITHUB_OUTPUT
          
          # Convert repository owner to lowercase
          OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "owner_lower=${OWNER_LOWER}" >> $GITHUB_OUTPUT
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.vars.outputs.owner_lower }}/${{ steps.vars.outputs.server_name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        continue-on-error: true
        with:
          context: ${{ steps.vars.outputs.context }}
          file: ${{ steps.vars.outputs.context }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          build-args: |
            BUILDKIT_INLINE_CACHE=1
      
      - name: Build and push Docker image (retry without GHA cache)
        if: steps.build.outcome == 'failure'
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.vars.outputs.context }}
          file: ${{ steps.vars.outputs.context }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false
          build-args: |
            BUILDKIT_INLINE_CACHE=1